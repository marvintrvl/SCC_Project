{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"category-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"text-2xl font-bold\"\n}, \"Landscapes Photos\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"grid grid-cols-3 gap-4 mt-4\"\n};\nconst _hoisted_4 = {\n  class: \"overflow-hidden rounded-lg\"\n};\nconst _hoisted_5 = [\"src\", \"alt\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"p\", null, _toDisplayString($data.categoryCount) + \" images in this category\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.photos, photo => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: photo.id\n    }, [_createVNode(_component_router_link, {\n      to: `/photo/${photo.id}`\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"img\", {\n        src: photo.url,\n        alt: photo.name,\n        class: \"w-full h-auto rounded-md\"\n      }, null, 8 /* PROPS */, _hoisted_5)])]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$data","categoryCount","_hoisted_3","_Fragment","_renderList","photos","photo","key","id","_createVNode","_component_router_link","to","_hoisted_4","src","url","alt","name"],"sources":["C:\\Users\\menzm\\Desktop\\SCC_Project\\frontend\\src\\views\\CategoryView.vue"],"sourcesContent":["<template>\r\n  <div class=\"category-container\">\r\n    <h1 class=\"text-2xl font-bold\">Landscapes Photos</h1>\r\n    <p>{{ categoryCount }} images in this category</p>\r\n\r\n    <div class=\"grid grid-cols-3 gap-4 mt-4\">\r\n      <div v-for=\"photo in photos\" :key=\"photo.id\">\r\n        <router-link :to=\"`/photo/${photo.id}`\">\r\n          <div class=\"overflow-hidden rounded-lg\">\r\n            <img :src=\"photo.url\" :alt=\"photo.name\" class=\"w-full h-auto rounded-md\">\r\n          </div>\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      categoryCount: 0,\r\n      photos: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchCategoryPhotos('Landscapes');\r\n  },\r\n  methods: {\r\n    async fetchCategoryPhotos(category) {\r\n      try {\r\n        const response = await fetch(`http://127.0.0.1:5001/categories/${category}`);\r\n        const data = await response.json();\r\n        this.categoryCount = data.category.count;\r\n        this.photos = data.category.photos;\r\n      } catch (error) {\r\n        console.error('Error fetching category photos:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;gCAC7BC,mBAAA,CAAqD;EAAjDD,KAAK,EAAC;AAAoB,GAAC,mBAAiB;;EAG3CA,KAAK,EAAC;AAA6B;;EAG7BA,KAAK,EAAC;AAA4B;;;;uBAP/CE,mBAAA,CAaM,OAbNC,UAaM,GAZJC,UAAqD,EACrDH,mBAAA,CAAkD,WAAAI,gBAAA,CAA5CC,KAAA,CAAAC,aAAa,IAAG,0BAAwB,iBAE9CN,mBAAA,CAQM,OARNO,UAQM,I,kBAPJN,mBAAA,CAMMO,SAAA,QAAAC,WAAA,CANeJ,KAAA,CAAAK,MAAM,EAAfC,KAAK;yBAAjBV,mBAAA,CAMM;MANwBW,GAAG,EAAED,KAAK,CAACE;QACvCC,YAAA,CAIcC,sBAAA;MAJAC,EAAE,YAAYL,KAAK,CAACE,EAAE;;wBAClC,MAEM,CAFNb,mBAAA,CAEM,OAFNiB,UAEM,GADJjB,mBAAA,CAAyE;QAAnEkB,GAAG,EAAEP,KAAK,CAACQ,GAAG;QAAGC,GAAG,EAAET,KAAK,CAACU,IAAI;QAAEtB,KAAK,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}